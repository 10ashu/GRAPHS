class Solution {
public:
    int minimumEffortPath(vector<vector<int>>& heights) {
    priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,greater<pair<int,pair<int,int>>>> pq;
        pq.push({0,{0,0}});
        int n=heights.size();
        int m=heights[0].size();
        vector<vector<int>> dis(n,vector<int>(m,INT_MAX));
        dis[0][0]=0;
        while(!pq.empty())
        {
            auto fnode=pq.top();
            pq.pop();
            int frontnodedis=fnode.first;
            int row=fnode.second.first;
            int col=fnode.second.second;
            if(row==n-1&&col==m-1)
            return dis[row][col];
            int dx[]={0,-1,0,+1};
            int dy[]={-1,0,+1,0};
            for(int i=0;i<4;i++)
            {
                int nrow=row+dx[i];
                int ncol=col+dy[i];
                if(nrow>=0&&nrow<n&&ncol>=0&&ncol<m)
                {
                    int  currdiff=abs(heights[row][col]-heights[nrow][ncol]);
                    int maxi=max(currdiff,frontnodedis);
                    if(maxi<dis[nrow][ncol])
                    {
                        dis[nrow][ncol]=maxi;
                        pq.push({dis[nrow][ncol],{nrow,ncol}});
                    }
                }
            }
        }
        return 0;
    }
};
