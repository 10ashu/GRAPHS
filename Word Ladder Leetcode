class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_map<string,bool> visited;
        unordered_map<string,bool> list;
        for(int i=0;i<wordList.size();i++)
        {
            list[wordList[i]]=true;
        }
        queue<pair<string,int>> q;
        q.push({beginWord,1});
        while(!q.empty())
        {
            auto fnode=q.front();
            string currstring=fnode.first;
            int currdis=fnode.second;
            q.pop();
            if(currstring==endWord)
            return currdis;
            for(int i=0;i<beginWord.size();i++)
            {
                char ch=currstring[i];
                for(char ch='a';ch<='z';ch++)
                {
                    currstring[i]=ch;
                    if(!visited[currstring]&&list[currstring])
                    {
                        q.push({currstring,currdis+1});
                        visited[currstring]=true;
                    }
                }
                currstring[i]=ch;
            }
        }
        return 0;
    }
};
