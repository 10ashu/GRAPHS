// Leetcode DFS in same matrix only 4 directions
class Solution {
public:
   void bfs(int i,int  j,vector<vector<int>> &visited,vector<vector<char>> &grid)
   {
       visited[i][j]=1;
       queue<pair<int,int>> q;
       q.push({i,j});
       int n=grid.size();
       int m=grid[0].size();
       while(!q.empty())
       {
           pair<int,int> front=q.front();
           int row=front.first;
           int col=front.second;
           
               if(row-1>=0&&row-1<n&&col>=0&&col<m&&!visited[row-1][col]&&grid[row-1][col]=='1')
               {
                   visited[row-1][col]=1;
                   q.push({row-1,col});
               }
                if(row+1>=0&&row+1<n&&col>=0&&col<m&&!visited[row+1][col]&&grid[row+1][col]=='1')
               {
                   visited[row+1][col]=1;
                   q.push({row-1,col});
               }
               
               if(row>=0&&row<n&&col-1>=0&&col-1<m&&!visited[row][col-1]&&grid[row][col-1]=='1')
               {
                   visited[row][col-1]=1;
                   q.push({row,col-1});
               }
              
               if(row>=0&&row<n&&col+1>=0&&col+1<m&&!visited[row][col+1]&&grid[row][col+1]=='1')
               {
                   visited[row][col+1]=1;
                   q.push({row,col+1});
               }
       }
   } 
   bool isvalid(int i,int j,int n,int m,vector<vector<char>> &grid)
   {
         if(i>=0&&j>=0&&i<n&&j<m&&grid[i][j]=='1')
      return true;

      return false;
   }
   void dfs(int i,int j,int n,int m,vector<vector<char>> &grid)
   {
    
        grid[i][j]='0';
         if(isvalid(i+1,j,n,m,grid))
         dfs(i+1,j,n,m,grid);
         if(isvalid(i-1,j,n,m,grid))
         dfs(i-1,j,n,m,grid);
         if(isvalid(i,j+1,n,m,grid))
         dfs(i,j+1,n,m,grid);
         if(isvalid(i,j-1,n,m,grid))
         dfs(i,j-1,n,m,grid);
       


   }
    int numIslands(vector<vector<char>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        // vector<vector<int>> visited(n,vector<int> (m,0));
        // int nrow[4]={0,-1,0,+1};
        // int ncol[4]={-1,0,+1,0};
        int cnt=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]=='1')
                {
                    dfs(i,j,n,m,grid);
                    cnt++;
                }
            }
        }
        return cnt;
    }
};
// GFS Diffrent Matrix 8 directions BFS
class Solution {
public:
   void bfs(int i,int  j,vector<vector<int>> &visited,vector<vector<char>> &grid)
   {
       visited[i][j]=1;
       queue<pair<int,int>> q;
       q.push({i,j});
       int n=grid.size();
       int m=grid[0].size();
       while(!q.empty())
       {
           pair<int,int> front=q.front();
           int row=front.first;
           int col=front.second;
           
               if(row-1>=0&&row-1<n&&col>=0&&col<m&&!visited[row-1][col]&&grid[row-1][col]=='1')
               {
                   visited[row-1][col]=1;
                   q.push({row-1,col});
               }
                if(row+1>=0&&row+1<n&&col>=0&&col<m&&!visited[row+1][col]&&grid[row+1][col]=='1')
               {
                   visited[row+1][col]=1;
                   q.push({row-1,col});
               }
               
               if(row>=0&&row<n&&col-1>=0&&col-1<m&&!visited[row][col-1]&&grid[row][col-1]=='1')
               {
                   visited[row][col-1]=1;
                   q.push({row,col-1});
               }
              
               if(row>=0&&row<n&&col+1>=0&&col+1<m&&!visited[row][col+1]&&grid[row][col+1]=='1')
               {
                   visited[row][col+1]=1;
                   q.push({row,col+1});
               }
       }
   } 
   bool isvalid(int i,int j,int n,int m,vector<vector<char>> &grid)
   {
         if(i>=0&&j>=0&&i<n&&j<m&&grid[i][j]=='1')
      return true;

      return false;
   }
   void dfs(int i,int j,int n,int m,vector<vector<char>> &grid)
   {
    
        grid[i][j]='0';
         if(isvalid(i+1,j,n,m,grid))
         dfs(i+1,j,n,m,grid);
         if(isvalid(i-1,j,n,m,grid))
         dfs(i-1,j,n,m,grid);
         if(isvalid(i,j+1,n,m,grid))
         dfs(i,j+1,n,m,grid);
         if(isvalid(i,j-1,n,m,grid))
         dfs(i,j-1,n,m,grid);
       


   }
    int numIslands(vector<vector<char>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        // vector<vector<int>> visited(n,vector<int> (m,0));
        // int nrow[4]={0,-1,0,+1};
        // int ncol[4]={-1,0,+1,0};
        int cnt=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]=='1')
                {
                    dfs(i,j,n,m,grid);
                    cnt++;
                }
            }
        }
        return cnt;
    }
};
