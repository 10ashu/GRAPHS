class Solution {
  public:
    vector<int> shortestPath(vector<vector<int>>& edges, int N,int M, int src){
        vector<int> adjlist[N];
        for(int i=0;i<edges.size();i++)
        {
            int u=edges[i][0];
            int v=edges[i][1];
            adjlist[u].push_back(v);
            adjlist[v].push_back(u);
        }
        vector<int> dis(N,INT_MAX);
        queue<pair<int,int>> q;
        q.push({src,0});
        dis[src]=0;
        unordered_map<int,bool> visited;
        while(!q.empty())
        {
            int node=q.front().first;
            int distance=q.front().second;
            q.pop();
            if(dis[node]!=INT_MAX)
            {
                for(auto nbr:adjlist[node])
                {
                    if(!visited[nbr])
                    {
                        if(distance+1<dis[nbr])
                        {
                            dis[nbr]=distance+1;
                            visited[nbr]=true;
                            q.push({nbr,distance+1});
                        }
                    }
                }
            }
        }
        for(int i=0;i<N;i++)
        {
            if(dis[i]==INT_MAX)
            dis[i]=-1;
        }
        return dis;
    }

};
