class Solution
{
	public:
	//Function to find number of strongly connected components in the graph.
	void dfs(int src,unordered_map<int,bool> &visited,stack<int> &ans,vector<vector<int>>& adj)
	{
	    visited[src]=true;
	    for(auto nbr:adj[src])
	    {
	        if(!visited[nbr])
	        {
	            dfs(nbr,visited,ans,adj);
	        }
	    }
	    ans.push(src);
	    
	}
	void dfs2(int src,unordered_map<int,bool> &visited2,unordered_map<int,list<int>> &adjlist)
	{
	    visited2[src]=true;
	    for(auto nbr:adjlist[src])
	    {
	        if(!visited2[nbr])
	        {
	            dfs2(nbr,visited2,adjlist);
	        }
	    }
	}
    int kosaraju(int V, vector<vector<int>>& adj)
    {
        unordered_map<int,bool> visited;
        stack<int> s;
        for(int i=0;i<V;i++)
        {
            if(!visited[i])
            dfs(i,visited,s,adj);
        }
        unordered_map<int,list<int>> adjlist;
        for(int i=0;i<adj.size();i++)
        {
            for(int j=0;j<adj[i].size();j++)
            {
                adjlist[adj[i][j]].push_back(i);
            }
        }
        int count=0;
        unordered_map<int,bool> visited2;
        while(!s.empty())
        {
            int top=s.top();
            s.pop();
            if(!visited2[top])
            {
                dfs2(top,visited2,adjlist);
                count++;
            }
        }
        return count;
    }
};
