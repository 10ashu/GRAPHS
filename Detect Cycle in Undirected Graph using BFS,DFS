//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
  bool checkcyclicUndirectedBFS(int src,unordered_map<int,bool> &visited,vector<int> adj[])
  {
          unordered_map<int,int > parent;
    queue<int > q;
    q.push(src);
  visited[src]=true;
  parent[src]=-1;
  
  while(!q.empty())
  {
    int  frontnode=q.front();
    q.pop();
    for(auto nbr:adj[frontnode])
    {
        if(!visited[nbr])
        {
             q.push(nbr);
            visited[nbr]=true;
            parent[nbr]=frontnode;
        }
        else if( visited[nbr] && nbr!=parent[frontnode])
        {
            return true;
        }
    }
  }
  return false;
    }
  bool checkcyclicUndirectedUsingDFS(int src,unordered_map<int,bool> &visited,vector<int> adj[],int parent)
  {
      visited[src]=true;
      for(auto nbr: adj[src])
      {
          if(!visited[nbr]){
          bool ans=check(nbr,visited,adj,src);
          if(ans==true)
          return true;
          }
          else if(visited[nbr]&& nbr!=parent)
          {
              return true;
          }
      }
      return false;
  }
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
      
           
    
     bool ans=false;
     unordered_map<int,bool> visited;
     for(int i=0;i<V;i++)
     {
        if(!visited[i])
        ans=check(i,visited,adj,-1);
        if(ans==true)
        break;
     }
     if(ans==true)
     return 1;
     else
     return 0;
    }
};

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;
        vector<int> adj[V];
        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        Solution obj;
        bool ans = obj.isCycle(V, adj);
        if (ans)
            cout << "1\n";
        else
            cout << "0\n";
    }
    return 0;
}
// } Driver Code Ends
