class Solution {
public:
   bool topo(unordered_map<int,list<int>> &adjlist,int n)
   {
         vector<int> indegree(n,0);
          unordered_map<int,bool> visited;
         for(auto node: adjlist)
         {
             for(auto nbr:node.second)
             {
                 indegree[nbr]++;
             }
         }
         queue<int> q;
         for(int i=0;i<n;i++)
         {
             if(indegree[i]==0){
                 visited[i]=true;
                 q.push(i);
             }
             
         }
         stack<int> ans;
        
         while(!q.empty())
         {
             int front=q.front();
             q.pop();
             ans.push(front);
             for(auto nbr:adjlist[front])
             {
                 if(!visited[nbr])
                 {
                    indegree[nbr]--;
                 if(indegree[nbr]==0)
                    {
                     q.push(nbr);
                        visited[nbr]=true;
                    }
                 }
                 
             }
         }
         if(ans.size()==n)
         return true;
         else
         return false;
   }
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        unordered_map<int,list<int>> adjlist;
        for(auto i:prerequisites)
        {
            int u=i[0];
            int v=i[1];
            adjlist[u].push_back(v);
        }
        bool ans=topo(adjlist,numCourses);
        return ans;
    }
};
