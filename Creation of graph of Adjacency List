#include<bits/stdc++.h>
using namespace std;
template <typename T>
class Graph
{
  public:
  unordered_map<T,list<T>> adjlist;
  void addedge(T u,T v,bool direction)
  {
    // 0-> Undirected graph
    // 1-> directed graph
    adjlist[u].push_back(v);
    if(direction==0)
    {
        adjlist[v].push_back(u);
    }
  }
  void printadj()
  {
    for(auto node:adjlist)
    {
        cout<<node.first<<"->";
        for(auto neigh:node.second)
        {
            cout<<neigh<<" ,";
        }
        cout<<endl;
    }
  }
  void bfs(T src,unordered_map<int,bool> &visited)
  {
     queue<T> q;
     q.push(src);
     visited[src]=true;
     while(!q.empty())
     {
        T front=q.front();
        q.pop();
        cout<<front<<" ";
        for(auto neigh:adjlist[front] )
        {
            if(!visited[neigh]){
            q.push(neigh);
            visited[neigh]=true;
            }
        }
     }

  }
  void dfs(T src,unordered_map<int,bool> &visited2)
  {
      cout<<src<<" ";
      visited2[src]=true;
      for(auto neigh:adjlist[src])
      {
        if(!visited2[neigh])
        {
            dfs(neigh,visited2);
        }
      }
  }
};
int main()
{
     Graph<int> g;
    
      g.addedge(0,1,0);
      g.addedge(1,3,0);
      g.addedge(0,2,0);
       g.addedge(2,4,0);
     g.printadj();
     cout<<endl;
     unordered_map<int,bool> visited;
     cout<<"Printing BFS"<<endl;
     for(int i=0;i<=4;i++)
     {
        if(!visited[i])
        g.bfs(i,visited);
     }
     cout<<endl;
     unordered_map<int,bool> visited2;
     cout<<"Printing DFS"<<endl;
     for(int i=0;i<=4;i++)
     {
        if(!visited2[i]){
        g.dfs(i,visited2);
        }
     }
    return 0;
}
