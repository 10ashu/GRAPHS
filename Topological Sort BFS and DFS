//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution
{
	public:
	//Function to return list containing vertices in Topological order. 
	void dfs(int src,vector<int> adj[],unordered_map<int,bool> &visited,vector<int> &ans)
	{
	    visited[src]=true;
	    for(auto nbr:adj[src])
	    {
	        if(!visited[nbr])
	        dfs(nbr,adj,visited,ans);
	    }
	    ans.push_back(src);
	}
	void bfs(vector<int> adj[],int V,vector<int> &ans)
	{
	    unordered_map<int,int> indegree;
	    for(int i=0;i<V;i++)
	    {
	        for(auto nbr:adj[i])
	        {
	            indegree[nbr]++;
	        }
	    }
	    queue<int> q;
	    for(int i=0;i<V;i++)
	    {
	        if(indegree[i]==0)
	        q.push(i);
	    }
	    while(!q.empty())
	    {
	        int front=q.front();
	        q.pop();
	        ans.push_back(front);
	        for(auto nbr:adj[front])
	        {
	            indegree[nbr]--;
	            if(indegree[nbr]==0)
	            q.push(nbr);
	        }
	    }
	}
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	   // vector<int> ans;
	   // unordered_map<int,bool> visited;
	   // for(int i=0;i<V;i++)
	   // {
	   //     if(!visited[i])
	   //     dfs(i,adj,visited,ans);
	   // }
	   // reverse(ans.begin(),ans.end());
	   // return ans;
	   vector<int> ans;
	   bfs(adj,V,ans);
	   return ans;
	}
};

